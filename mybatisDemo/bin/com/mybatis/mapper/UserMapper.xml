<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间,作用就是对sql进行分类化的管理,理解为sql隔离
    注意:使用mapper代理开发时，namespace有特殊作用
 -->
<mapper namespace="com.mybatis.mapper.UserMapper">

<sql id="query_user_where">
	 <if test="userCustom!=null">
        <if test="userCustom.sex!=null and userCustom.sex!='' ">
            and sex=#{userCustom.sex}
        </if>
        <if test="userCustom.username!=null and userCustom.username!='' ">
             and username=#{userCustom.username}
         </if>
     </if>
</sql>

<!-- 在映射文件中配置很多sql语句 -->
<!-- 需求：通过Id查询用户表的记录 -->
<!-- 通过SELECT执行数据库查询 
    id:标识映射文件中的sql，称为statement的id;
        将sql语句封装在mapperStatement的对象中，所以Id称为Statement的id;
    parameterType:指定输入参数的类型,这里指定int型
    #{}:表示一个占位符;
    #{id}:其中Id表示接收输入的参数，参数名称就是Id,如果输入参数是简单类型，#{}中的参数名可以任意，可以是value或者其它名称;
    resultType:指定sql输出结果所映射的java对象类型,select指定resultType表示将单条记录映射成java对象。
-->
<select id="findUserById" parameterType="int" resultType="user" >
    select * from t_user where id=#{id}
</select>
<!-- 根据用户名称模糊查询用户信息,可能返回多条数据
    resultType:指定的就是单条记录所映射的java类型;
    ${}:表示拼接sql字符串，将接收到的参数内容不加任何修饰拼接在sql中.
    使用${}拼接sql，可能会引起sql注入
    ${value}:接收输入参数的内容，如果传入的是简单类型,${}中只能使用value
 -->
<select id="findUserByName" parameterType="java.lang.String" resultType="user" >
    select * from t_user where username LIKE '%${value}%'
</select>
<select id="findUserList" parameterType="com.mybatis.pojo.vo.UserQueryVo" resultType="com.mybatis.search.UserCustom">
	select * from t_user 
	 <!-- 动态sql查询：where可以自动去掉第一个and -->
    <where>
    <!-- 引用sql片段的id，如果refid指定的不在本mapper.xml中，需要前边加namespace -->
        <include refid="query_user_where"></include>
        <!-- 这里可以引用其它的sql片段 -->
    </where>
   <!--  <where>
    <if test="ids!=null">
     		 使用foreach遍历ids
          collection:指定输入对象的集合属性
          item:每个遍历生成对象中
          open：开始遍历时拼接的串
          close:技术遍历时拼接的串
          separator:遍历的两个对象中需要拼接的串
      
	      <foreach collection="ids" item="user_id" open="AND (" close=")" separator="or">
	          id=#{user_id}
	      </foreach>
      </where> -->
</select>
<!-- 添加用户 
parameterType:指定输入的参数类型是pojo(包括用户信息);
#{}中指定pojo的属性名称，接收到pojo对象的属性值    ,mybatis通过OGNL(类似struts2的OGNL)获取对象的属性值
-->
<insert id="insertUser" parameterType="user" >
    <!-- 
        将insert插入的数据的主键返回到User对象中;
        select last_insert_id():得到刚insert进去记录的主键值，只适用于自增主键;
        keyProperty:将查询到的主键值，设置到parameterType指定的对象的那个属性
        order:select last_insert_id()执行顺序，相对于insert语句来说它的执行顺序。
        resultType:指定select last_insert_id()的结果类型;
     -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
        select last_insert_id()
    </selectKey>
    <!-- 
        使用mysql的uuid()，实现非自增主键的返回。
        执行过程:通过uuid()得到主键，将主键设置到user对象的Id的属性中，其次，在insert执行时，从user对象中取出Id属性值;
     <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
        select uuid()
    </selectKey>
        insert into user (id,username,birthday,sex,address) values(#{id},#{username},#{birthday},#{sex},#{address})
     -->
    insert into t_user (username,birthday,sex,address) values(#{username},#{birthday},#{sex},#{address})
</insert>
<!-- 删除用户 
    根据ID删除用户,需要输入Id值
-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from t_user where id=#{id}
    </delete>
<!-- 更新用户 
    需要传入用户的Id和用户的更新信息
    parameterType:指定User对象，包括Id和用户的更新信息,注意：Id是必须存在的
    #{id}:从输入的User对象中获取Id的属性值
-->
<update id="updateUser" parameterType="user">
    update t_user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} 
    where id=#{id}
</update>

</mapper>